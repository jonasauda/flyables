// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: model.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VinteR.Model.Gen {

  /// <summary>Holder for reflection information generated from model.proto</summary>
  public static partial class ModelReflection {

    #region Descriptor
    /// <summary>File descriptor for model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgttb2RlbC5wcm90byK5BQoKTW9jYXBGcmFtZRIVCg1FbGFwc2VkTWlsbGlz",
            "GAEgASgDEhAKCFNvdXJjZUlkGAIgASgJEhMKC0FkYXB0ZXJUeXBlGAMgASgJ",
            "Eg8KB0dlc3R1cmUYBCABKAkSDwoHTGF0ZW5jeRgFIAEoAhIgCgZib2RpZXMY",
            "BiADKAsyEC5Nb2NhcEZyYW1lLkJvZHkaqAQKBEJvZHkSLAoIQm9keVR5cGUY",
            "ASABKA4yGi5Nb2NhcEZyYW1lLkJvZHkuRUJvZHlUeXBlEiwKCFNpZGVUeXBl",
            "GAIgASgOMhouTW9jYXBGcmFtZS5Cb2R5LkVTaWRlVHlwZRImCgZQb2ludHMY",
            "AyADKAsyFi5Nb2NhcEZyYW1lLkJvZHkuUG9pbnQSLQoIUm90YXRpb24YBCAB",
            "KAsyGy5Nb2NhcEZyYW1lLkJvZHkuUXVhdGVybmlvbhIqCghDZW50cm9pZBgF",
            "IAEoCzIYLk1vY2FwRnJhbWUuQm9keS5WZWN0b3IzEgwKBE5hbWUYBiABKAka",
            "KgoHVmVjdG9yMxIJCgFYGAEgASgCEgkKAVkYAiABKAISCQoBWhgDIAEoAhpQ",
            "CgVQb2ludBIMCgROYW1lGAEgASgJEg0KBVN0YXRlGAIgASgJEioKCFBvc2l0",
            "aW9uGAMgASgLMhguTW9jYXBGcmFtZS5Cb2R5LlZlY3RvcjMaOAoKUXVhdGVy",
            "bmlvbhIJCgFYGAEgASgCEgkKAVkYAiABKAISCQoBWhgDIAEoAhIJCgFXGAQg",
            "ASgCIk0KCUVCb2R5VHlwZRIKCgZNYXJrZXIQABINCglNYXJrZXJTZXQQARIN",
            "CglSaWdpZEJvZHkQAhIMCghTa2VsZXRvbhADEggKBEhhbmQQBCIsCglFU2lk",
            "ZVR5cGUSCAoETGVmdBAAEgkKBVJpZ2h0EAESCgoGTm9TaWRlEAIiTQoPU2Vz",
            "c2lvbk1ldGFkYXRhEgwKBE5hbWUYASABKAkSEAoIRHVyYXRpb24YAiABKAMS",
            "GgoSU2Vzc2lvblN0YXJ0TWlsbGlzGAMgASgDIkYKB1Nlc3Npb24SHgoEbWV0",
            "YRgBIAEoCzIQLlNlc3Npb25NZXRhZGF0YRIbCgZmcmFtZXMYAiADKAsyCy5N",
            "b2NhcEZyYW1lIqIBChBTZXNzaW9uc01ldGFkYXRhEj4KD2lucHV0U291cmNl",
            "TWV0YRgBIAMoCzIlLlNlc3Npb25zTWV0YWRhdGEuSW5wdXRTb3VyY2VNZXRh",
            "ZGF0YRpOChNJbnB1dFNvdXJjZU1ldGFkYXRhEhAKCFNvdXJjZUlkGAEgASgJ",
            "EiUKC3Nlc3Npb25NZXRhGAIgAygLMhAuU2Vzc2lvbk1ldGFkYXRhQhOqAhBW",
            "aW50ZVIuTW9kZWwuR2VuYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VinteR.Model.Gen.MocapFrame), global::VinteR.Model.Gen.MocapFrame.Parser, new[]{ "ElapsedMillis", "SourceId", "AdapterType", "Gesture", "Latency", "Bodies" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VinteR.Model.Gen.MocapFrame.Types.Body), global::VinteR.Model.Gen.MocapFrame.Types.Body.Parser, new[]{ "BodyType", "SideType", "Points", "Rotation", "Centroid", "Name" }, null, new[]{ typeof(global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.EBodyType), typeof(global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.ESideType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Vector3), global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Point), global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Point.Parser, new[]{ "Name", "State", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Quaternion), global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::VinteR.Model.Gen.SessionMetadata), global::VinteR.Model.Gen.SessionMetadata.Parser, new[]{ "Name", "Duration", "SessionStartMillis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VinteR.Model.Gen.Session), global::VinteR.Model.Gen.Session.Parser, new[]{ "Meta", "Frames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VinteR.Model.Gen.SessionsMetadata), global::VinteR.Model.Gen.SessionsMetadata.Parser, new[]{ "InputSourceMeta" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::VinteR.Model.Gen.SessionsMetadata.Types.InputSourceMetadata), global::VinteR.Model.Gen.SessionsMetadata.Types.InputSourceMetadata.Parser, new[]{ "SourceId", "SessionMeta" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MocapFrame : pb::IMessage<MocapFrame> {
    private static readonly pb::MessageParser<MocapFrame> _parser = new pb::MessageParser<MocapFrame>(() => new MocapFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MocapFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VinteR.Model.Gen.ModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MocapFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MocapFrame(MocapFrame other) : this() {
      elapsedMillis_ = other.elapsedMillis_;
      sourceId_ = other.sourceId_;
      adapterType_ = other.adapterType_;
      gesture_ = other.gesture_;
      latency_ = other.latency_;
      bodies_ = other.bodies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MocapFrame Clone() {
      return new MocapFrame(this);
    }

    /// <summary>Field number for the "ElapsedMillis" field.</summary>
    public const int ElapsedMillisFieldNumber = 1;
    private long elapsedMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ElapsedMillis {
      get { return elapsedMillis_; }
      set {
        elapsedMillis_ = value;
      }
    }

    /// <summary>Field number for the "SourceId" field.</summary>
    public const int SourceIdFieldNumber = 2;
    private string sourceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceId {
      get { return sourceId_; }
      set {
        sourceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AdapterType" field.</summary>
    public const int AdapterTypeFieldNumber = 3;
    private string adapterType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdapterType {
      get { return adapterType_; }
      set {
        adapterType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Gesture" field.</summary>
    public const int GestureFieldNumber = 4;
    private string gesture_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gesture {
      get { return gesture_; }
      set {
        gesture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Latency" field.</summary>
    public const int LatencyFieldNumber = 5;
    private float latency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Latency {
      get { return latency_; }
      set {
        latency_ = value;
      }
    }

    /// <summary>Field number for the "bodies" field.</summary>
    public const int BodiesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::VinteR.Model.Gen.MocapFrame.Types.Body> _repeated_bodies_codec
        = pb::FieldCodec.ForMessage(50, global::VinteR.Model.Gen.MocapFrame.Types.Body.Parser);
    private readonly pbc::RepeatedField<global::VinteR.Model.Gen.MocapFrame.Types.Body> bodies_ = new pbc::RepeatedField<global::VinteR.Model.Gen.MocapFrame.Types.Body>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VinteR.Model.Gen.MocapFrame.Types.Body> Bodies {
      get { return bodies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MocapFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MocapFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ElapsedMillis != other.ElapsedMillis) return false;
      if (SourceId != other.SourceId) return false;
      if (AdapterType != other.AdapterType) return false;
      if (Gesture != other.Gesture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Latency, other.Latency)) return false;
      if(!bodies_.Equals(other.bodies_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ElapsedMillis != 0L) hash ^= ElapsedMillis.GetHashCode();
      if (SourceId.Length != 0) hash ^= SourceId.GetHashCode();
      if (AdapterType.Length != 0) hash ^= AdapterType.GetHashCode();
      if (Gesture.Length != 0) hash ^= Gesture.GetHashCode();
      if (Latency != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Latency);
      hash ^= bodies_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ElapsedMillis != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ElapsedMillis);
      }
      if (SourceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SourceId);
      }
      if (AdapterType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AdapterType);
      }
      if (Gesture.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Gesture);
      }
      if (Latency != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Latency);
      }
      bodies_.WriteTo(output, _repeated_bodies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ElapsedMillis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElapsedMillis);
      }
      if (SourceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceId);
      }
      if (AdapterType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdapterType);
      }
      if (Gesture.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gesture);
      }
      if (Latency != 0F) {
        size += 1 + 4;
      }
      size += bodies_.CalculateSize(_repeated_bodies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MocapFrame other) {
      if (other == null) {
        return;
      }
      if (other.ElapsedMillis != 0L) {
        ElapsedMillis = other.ElapsedMillis;
      }
      if (other.SourceId.Length != 0) {
        SourceId = other.SourceId;
      }
      if (other.AdapterType.Length != 0) {
        AdapterType = other.AdapterType;
      }
      if (other.Gesture.Length != 0) {
        Gesture = other.Gesture;
      }
      if (other.Latency != 0F) {
        Latency = other.Latency;
      }
      bodies_.Add(other.bodies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ElapsedMillis = input.ReadInt64();
            break;
          }
          case 18: {
            SourceId = input.ReadString();
            break;
          }
          case 26: {
            AdapterType = input.ReadString();
            break;
          }
          case 34: {
            Gesture = input.ReadString();
            break;
          }
          case 45: {
            Latency = input.ReadFloat();
            break;
          }
          case 50: {
            bodies_.AddEntriesFrom(input, _repeated_bodies_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MocapFrame message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Body : pb::IMessage<Body> {
        private static readonly pb::MessageParser<Body> _parser = new pb::MessageParser<Body>(() => new Body());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Body> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VinteR.Model.Gen.MocapFrame.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Body() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Body(Body other) : this() {
          bodyType_ = other.bodyType_;
          sideType_ = other.sideType_;
          points_ = other.points_.Clone();
          Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
          Centroid = other.centroid_ != null ? other.Centroid.Clone() : null;
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Body Clone() {
          return new Body(this);
        }

        /// <summary>Field number for the "BodyType" field.</summary>
        public const int BodyTypeFieldNumber = 1;
        private global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.EBodyType bodyType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.EBodyType BodyType {
          get { return bodyType_; }
          set {
            bodyType_ = value;
          }
        }

        /// <summary>Field number for the "SideType" field.</summary>
        public const int SideTypeFieldNumber = 2;
        private global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.ESideType sideType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.ESideType SideType {
          get { return sideType_; }
          set {
            sideType_ = value;
          }
        }

        /// <summary>Field number for the "Points" field.</summary>
        public const int PointsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Point> _repeated_points_codec
            = pb::FieldCodec.ForMessage(26, global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Point.Parser);
        private readonly pbc::RepeatedField<global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Point> points_ = new pbc::RepeatedField<global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Point>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Point> Points {
          get { return points_; }
        }

        /// <summary>Field number for the "Rotation" field.</summary>
        public const int RotationFieldNumber = 4;
        private global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Quaternion rotation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Quaternion Rotation {
          get { return rotation_; }
          set {
            rotation_ = value;
          }
        }

        /// <summary>Field number for the "Centroid" field.</summary>
        public const int CentroidFieldNumber = 5;
        private global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Vector3 centroid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Vector3 Centroid {
          get { return centroid_; }
          set {
            centroid_ = value;
          }
        }

        /// <summary>Field number for the "Name" field.</summary>
        public const int NameFieldNumber = 6;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Body);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Body other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BodyType != other.BodyType) return false;
          if (SideType != other.SideType) return false;
          if(!points_.Equals(other.points_)) return false;
          if (!object.Equals(Rotation, other.Rotation)) return false;
          if (!object.Equals(Centroid, other.Centroid)) return false;
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BodyType != 0) hash ^= BodyType.GetHashCode();
          if (SideType != 0) hash ^= SideType.GetHashCode();
          hash ^= points_.GetHashCode();
          if (rotation_ != null) hash ^= Rotation.GetHashCode();
          if (centroid_ != null) hash ^= Centroid.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BodyType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) BodyType);
          }
          if (SideType != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) SideType);
          }
          points_.WriteTo(output, _repeated_points_codec);
          if (rotation_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Rotation);
          }
          if (centroid_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Centroid);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BodyType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BodyType);
          }
          if (SideType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SideType);
          }
          size += points_.CalculateSize(_repeated_points_codec);
          if (rotation_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
          }
          if (centroid_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Centroid);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Body other) {
          if (other == null) {
            return;
          }
          if (other.BodyType != 0) {
            BodyType = other.BodyType;
          }
          if (other.SideType != 0) {
            SideType = other.SideType;
          }
          points_.Add(other.points_);
          if (other.rotation_ != null) {
            if (rotation_ == null) {
              rotation_ = new global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Quaternion();
            }
            Rotation.MergeFrom(other.Rotation);
          }
          if (other.centroid_ != null) {
            if (centroid_ == null) {
              centroid_ = new global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Vector3();
            }
            Centroid.MergeFrom(other.Centroid);
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                bodyType_ = (global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.EBodyType) input.ReadEnum();
                break;
              }
              case 16: {
                sideType_ = (global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.ESideType) input.ReadEnum();
                break;
              }
              case 26: {
                points_.AddEntriesFrom(input, _repeated_points_codec);
                break;
              }
              case 34: {
                if (rotation_ == null) {
                  rotation_ = new global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Quaternion();
                }
                input.ReadMessage(rotation_);
                break;
              }
              case 42: {
                if (centroid_ == null) {
                  centroid_ = new global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Vector3();
                }
                input.ReadMessage(centroid_);
                break;
              }
              case 50: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Body message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum EBodyType {
            [pbr::OriginalName("Marker")] Marker = 0,
            [pbr::OriginalName("MarkerSet")] MarkerSet = 1,
            [pbr::OriginalName("RigidBody")] RigidBody = 2,
            [pbr::OriginalName("Skeleton")] Skeleton = 3,
            [pbr::OriginalName("Hand")] Hand = 4,
          }

          public enum ESideType {
            [pbr::OriginalName("Left")] Left = 0,
            [pbr::OriginalName("Right")] Right = 1,
            [pbr::OriginalName("NoSide")] NoSide = 2,
          }

          public sealed partial class Vector3 : pb::IMessage<Vector3> {
            private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::VinteR.Model.Gen.MocapFrame.Types.Body.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Vector3() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Vector3(Vector3 other) : this() {
              x_ = other.x_;
              y_ = other.y_;
              z_ = other.z_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Vector3 Clone() {
              return new Vector3(this);
            }

            /// <summary>Field number for the "X" field.</summary>
            public const int XFieldNumber = 1;
            private float x_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float X {
              get { return x_; }
              set {
                x_ = value;
              }
            }

            /// <summary>Field number for the "Y" field.</summary>
            public const int YFieldNumber = 2;
            private float y_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Y {
              get { return y_; }
              set {
                y_ = value;
              }
            }

            /// <summary>Field number for the "Z" field.</summary>
            public const int ZFieldNumber = 3;
            private float z_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Z {
              get { return z_; }
              set {
                z_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Vector3);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Vector3 other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
              if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
              if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (X != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(X);
              }
              if (Y != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Y);
              }
              if (Z != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(Z);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (X != 0F) {
                size += 1 + 4;
              }
              if (Y != 0F) {
                size += 1 + 4;
              }
              if (Z != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Vector3 other) {
              if (other == null) {
                return;
              }
              if (other.X != 0F) {
                X = other.X;
              }
              if (other.Y != 0F) {
                Y = other.Y;
              }
              if (other.Z != 0F) {
                Z = other.Z;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    X = input.ReadFloat();
                    break;
                  }
                  case 21: {
                    Y = input.ReadFloat();
                    break;
                  }
                  case 29: {
                    Z = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Point : pb::IMessage<Point> {
            private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Point> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::VinteR.Model.Gen.MocapFrame.Types.Body.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Point() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Point(Point other) : this() {
              name_ = other.name_;
              state_ = other.state_;
              Position = other.position_ != null ? other.Position.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Point Clone() {
              return new Point(this);
            }

            /// <summary>Field number for the "Name" field.</summary>
            public const int NameFieldNumber = 1;
            private string name_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "State" field.</summary>
            public const int StateFieldNumber = 2;
            private string state_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string State {
              get { return state_; }
              set {
                state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "Position" field.</summary>
            public const int PositionFieldNumber = 3;
            private global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Vector3 position_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Vector3 Position {
              get { return position_; }
              set {
                position_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Point);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Point other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if (State != other.State) return false;
              if (!object.Equals(Position, other.Position)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (State.Length != 0) hash ^= State.GetHashCode();
              if (position_ != null) hash ^= Position.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Name.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              if (State.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(State);
              }
              if (position_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Position);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (State.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
              }
              if (position_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Point other) {
              if (other == null) {
                return;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.State.Length != 0) {
                State = other.State;
              }
              if (other.position_ != null) {
                if (position_ == null) {
                  position_ = new global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Vector3();
                }
                Position.MergeFrom(other.Position);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 18: {
                    State = input.ReadString();
                    break;
                  }
                  case 26: {
                    if (position_ == null) {
                      position_ = new global::VinteR.Model.Gen.MocapFrame.Types.Body.Types.Vector3();
                    }
                    input.ReadMessage(position_);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Quaternion : pb::IMessage<Quaternion> {
            private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::VinteR.Model.Gen.MocapFrame.Types.Body.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Quaternion() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Quaternion(Quaternion other) : this() {
              x_ = other.x_;
              y_ = other.y_;
              z_ = other.z_;
              w_ = other.w_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Quaternion Clone() {
              return new Quaternion(this);
            }

            /// <summary>Field number for the "X" field.</summary>
            public const int XFieldNumber = 1;
            private float x_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float X {
              get { return x_; }
              set {
                x_ = value;
              }
            }

            /// <summary>Field number for the "Y" field.</summary>
            public const int YFieldNumber = 2;
            private float y_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Y {
              get { return y_; }
              set {
                y_ = value;
              }
            }

            /// <summary>Field number for the "Z" field.</summary>
            public const int ZFieldNumber = 3;
            private float z_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Z {
              get { return z_; }
              set {
                z_ = value;
              }
            }

            /// <summary>Field number for the "W" field.</summary>
            public const int WFieldNumber = 4;
            private float w_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float W {
              get { return w_; }
              set {
                w_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Quaternion);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Quaternion other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
              if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
              if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
              if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (X != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(X);
              }
              if (Y != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Y);
              }
              if (Z != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(Z);
              }
              if (W != 0F) {
                output.WriteRawTag(37);
                output.WriteFloat(W);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (X != 0F) {
                size += 1 + 4;
              }
              if (Y != 0F) {
                size += 1 + 4;
              }
              if (Z != 0F) {
                size += 1 + 4;
              }
              if (W != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Quaternion other) {
              if (other == null) {
                return;
              }
              if (other.X != 0F) {
                X = other.X;
              }
              if (other.Y != 0F) {
                Y = other.Y;
              }
              if (other.Z != 0F) {
                Z = other.Z;
              }
              if (other.W != 0F) {
                W = other.W;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    X = input.ReadFloat();
                    break;
                  }
                  case 21: {
                    Y = input.ReadFloat();
                    break;
                  }
                  case 29: {
                    Z = input.ReadFloat();
                    break;
                  }
                  case 37: {
                    W = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class SessionMetadata : pb::IMessage<SessionMetadata> {
    private static readonly pb::MessageParser<SessionMetadata> _parser = new pb::MessageParser<SessionMetadata>(() => new SessionMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SessionMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VinteR.Model.Gen.ModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionMetadata(SessionMetadata other) : this() {
      name_ = other.name_;
      duration_ = other.duration_;
      sessionStartMillis_ = other.sessionStartMillis_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionMetadata Clone() {
      return new SessionMetadata(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "SessionStartMillis" field.</summary>
    public const int SessionStartMillisFieldNumber = 3;
    private long sessionStartMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SessionStartMillis {
      get { return sessionStartMillis_; }
      set {
        sessionStartMillis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SessionMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SessionMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Duration != other.Duration) return false;
      if (SessionStartMillis != other.SessionStartMillis) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (SessionStartMillis != 0L) hash ^= SessionStartMillis.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Duration != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Duration);
      }
      if (SessionStartMillis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SessionStartMillis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (SessionStartMillis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionStartMillis);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SessionMetadata other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      if (other.SessionStartMillis != 0L) {
        SessionStartMillis = other.SessionStartMillis;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Duration = input.ReadInt64();
            break;
          }
          case 24: {
            SessionStartMillis = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Session : pb::IMessage<Session> {
    private static readonly pb::MessageParser<Session> _parser = new pb::MessageParser<Session>(() => new Session());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Session> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VinteR.Model.Gen.ModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session(Session other) : this() {
      Meta = other.meta_ != null ? other.Meta.Clone() : null;
      frames_ = other.frames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session Clone() {
      return new Session(this);
    }

    /// <summary>Field number for the "meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::VinteR.Model.Gen.SessionMetadata meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VinteR.Model.Gen.SessionMetadata Meta {
      get { return meta_; }
      set {
        meta_ = value;
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VinteR.Model.Gen.MocapFrame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(18, global::VinteR.Model.Gen.MocapFrame.Parser);
    private readonly pbc::RepeatedField<global::VinteR.Model.Gen.MocapFrame> frames_ = new pbc::RepeatedField<global::VinteR.Model.Gen.MocapFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VinteR.Model.Gen.MocapFrame> Frames {
      get { return frames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Session);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Session other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if(!frames_.Equals(other.frames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (meta_ != null) hash ^= Meta.GetHashCode();
      hash ^= frames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      frames_.WriteTo(output, _repeated_frames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Session other) {
      if (other == null) {
        return;
      }
      if (other.meta_ != null) {
        if (meta_ == null) {
          meta_ = new global::VinteR.Model.Gen.SessionMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      frames_.Add(other.frames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (meta_ == null) {
              meta_ = new global::VinteR.Model.Gen.SessionMetadata();
            }
            input.ReadMessage(meta_);
            break;
          }
          case 18: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SessionsMetadata : pb::IMessage<SessionsMetadata> {
    private static readonly pb::MessageParser<SessionsMetadata> _parser = new pb::MessageParser<SessionsMetadata>(() => new SessionsMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SessionsMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VinteR.Model.Gen.ModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionsMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionsMetadata(SessionsMetadata other) : this() {
      inputSourceMeta_ = other.inputSourceMeta_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionsMetadata Clone() {
      return new SessionsMetadata(this);
    }

    /// <summary>Field number for the "inputSourceMeta" field.</summary>
    public const int InputSourceMetaFieldNumber = 1;
    private static readonly pb::FieldCodec<global::VinteR.Model.Gen.SessionsMetadata.Types.InputSourceMetadata> _repeated_inputSourceMeta_codec
        = pb::FieldCodec.ForMessage(10, global::VinteR.Model.Gen.SessionsMetadata.Types.InputSourceMetadata.Parser);
    private readonly pbc::RepeatedField<global::VinteR.Model.Gen.SessionsMetadata.Types.InputSourceMetadata> inputSourceMeta_ = new pbc::RepeatedField<global::VinteR.Model.Gen.SessionsMetadata.Types.InputSourceMetadata>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VinteR.Model.Gen.SessionsMetadata.Types.InputSourceMetadata> InputSourceMeta {
      get { return inputSourceMeta_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SessionsMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SessionsMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inputSourceMeta_.Equals(other.inputSourceMeta_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inputSourceMeta_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inputSourceMeta_.WriteTo(output, _repeated_inputSourceMeta_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inputSourceMeta_.CalculateSize(_repeated_inputSourceMeta_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SessionsMetadata other) {
      if (other == null) {
        return;
      }
      inputSourceMeta_.Add(other.inputSourceMeta_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inputSourceMeta_.AddEntriesFrom(input, _repeated_inputSourceMeta_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SessionsMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class InputSourceMetadata : pb::IMessage<InputSourceMetadata> {
        private static readonly pb::MessageParser<InputSourceMetadata> _parser = new pb::MessageParser<InputSourceMetadata>(() => new InputSourceMetadata());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InputSourceMetadata> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::VinteR.Model.Gen.SessionsMetadata.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InputSourceMetadata() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InputSourceMetadata(InputSourceMetadata other) : this() {
          sourceId_ = other.sourceId_;
          sessionMeta_ = other.sessionMeta_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InputSourceMetadata Clone() {
          return new InputSourceMetadata(this);
        }

        /// <summary>Field number for the "SourceId" field.</summary>
        public const int SourceIdFieldNumber = 1;
        private string sourceId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SourceId {
          get { return sourceId_; }
          set {
            sourceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sessionMeta" field.</summary>
        public const int SessionMetaFieldNumber = 2;
        private static readonly pb::FieldCodec<global::VinteR.Model.Gen.SessionMetadata> _repeated_sessionMeta_codec
            = pb::FieldCodec.ForMessage(18, global::VinteR.Model.Gen.SessionMetadata.Parser);
        private readonly pbc::RepeatedField<global::VinteR.Model.Gen.SessionMetadata> sessionMeta_ = new pbc::RepeatedField<global::VinteR.Model.Gen.SessionMetadata>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::VinteR.Model.Gen.SessionMetadata> SessionMeta {
          get { return sessionMeta_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InputSourceMetadata);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InputSourceMetadata other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SourceId != other.SourceId) return false;
          if(!sessionMeta_.Equals(other.sessionMeta_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SourceId.Length != 0) hash ^= SourceId.GetHashCode();
          hash ^= sessionMeta_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SourceId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(SourceId);
          }
          sessionMeta_.WriteTo(output, _repeated_sessionMeta_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SourceId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceId);
          }
          size += sessionMeta_.CalculateSize(_repeated_sessionMeta_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InputSourceMetadata other) {
          if (other == null) {
            return;
          }
          if (other.SourceId.Length != 0) {
            SourceId = other.SourceId;
          }
          sessionMeta_.Add(other.sessionMeta_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                SourceId = input.ReadString();
                break;
              }
              case 18: {
                sessionMeta_.AddEntriesFrom(input, _repeated_sessionMeta_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
