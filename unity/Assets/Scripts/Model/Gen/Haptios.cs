// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Model/Protobuf/haptios.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HaptiOS {

  /// <summary>Holder for reflection information generated from Model/Protobuf/haptios.proto</summary>
  public static partial class HaptiosReflection {

    #region Descriptor
    /// <summary>File descriptor for Model/Protobuf/haptios.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HaptiosReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxNb2RlbC9Qcm90b2J1Zi9oYXB0aW9zLnByb3RvEgdIYXB0aU9TIhcKBUVt",
            "cHR5Eg4KBnN0YXR1cxgBIAEoBSIaCghEcm9uZUlkcxIOCgZ2YWx1ZXMYASAD",
            "KAUiIgoNQ29ubmVjdFJlc3VsdBIRCgljb25uZWN0ZWQYASABKAgiGgoHVGlt",
            "ZW91dBIPCgdzZWNvbmRzGAEgASgFIkMKDUNvbm5lY3RQYXJhbXMSDwoHZHJv",
            "bmVJZBgBIAEoBRIQCghudW1UcmllcxgCIAEoBRIPCgdtYXhUaWx0GAMgASgF",
            "IiMKEERpc2Nvbm5lY3RQYXJhbXMSDwoHZHJvbmVJZBgBIAEoBSJDCg1UYWtl",
            "T2ZmUGFyYW1zEg8KB2Ryb25lSWQYASABKAUSIQoHdGltZW91dBgCIAEoCzIQ",
            "LkhhcHRpT1MuVGltZW91dCJACgpMYW5kUGFyYW1zEg8KB2Ryb25lSWQYASAB",
            "KAUSIQoHdGltZW91dBgCIAEoCzIQLkhhcHRpT1MuVGltZW91dCJjCgxEcm9u",
            "ZUNvbnRyb2wSDwoHZHJvbmVJZBgBIAEoBRIMCgRyb2xsGAIgASgFEg0KBXBp",
            "dGNoGAMgASgFEgsKA3lhdxgEIAEoBRIYChB2ZXJ0aWNhbE1vdmVtZW50GAUg",
            "ASgFIjUKD0JsaW1wSWRlbnRpZmllchIOCgZudW1iZXIYASABKAUSEgoKaXBf",
            "YWRkcmVzcxgCIAEoCSKAAgoMQmxpbXBDb250cm9sEiwKCmlkZW50aWZpZXIY",
            "ASABKAsyGC5IYXB0aU9TLkJsaW1wSWRlbnRpZmllchIQCgh0aHJvdHRsZRgC",
            "IAEoBRIQCghzdGVlcmluZxgDIAEoBRIOCgZoZWlnaHQYBCABKAUSKAoEbW9k",
            "ZRgFIAEoDjIaLkhhcHRpT1MuQmxpbXBDb250cm9sLk1vZGUiZAoETW9kZRIK",
            "CgZNQU5VQUwQABIOCgpNQU5VQUxfQUxUEAESFQoRWUFXX1NUQUJJTElaQVRJ",
            "T04QAhIZChVZQVdfU1RBQklMSVpBVElPTl9BTFQQAxIOCgpNT1RPUlNfT0ZG",
            "EGQijwEKC0JsaW1wU3RhdHVzEiwKCmlkZW50aWZpZXIYASABKAsyGC5IYXB0",
            "aU9TLkJsaW1wSWRlbnRpZmllchIPCgdiYXR0ZXJ5GAIgASgCEhEKCXlhd19h",
            "bmdsZRgDIAEoAhIYChB0YXJnZXRfeWF3X2FuZ2xlGAQgASgCEhQKDGxhc2Vy",
            "X2hlaWdodBgFIAEoAiIxCglCbGltcExpc3QSJAoGYmxpbXBzGAEgAygLMhQu",
            "SGFwdGlPUy5CbGltcFN0YXR1cyK2AgoKR2FtZU9iamVjdBIKCgJpZBgBIAEo",
            "CRItCghwb3NpdGlvbhgCIAEoCzIbLkhhcHRpT1MuR2FtZU9iamVjdC5WZWN0",
            "b3IzEjAKCHJvdGF0aW9uGAMgASgLMh4uSGFwdGlPUy5HYW1lT2JqZWN0LlF1",
            "YXRlcm5pb24SKgoGZXVsZXJzGAQgASgLMhouSGFwdGlPUy5HYW1lT2JqZWN0",
            "LkV1bGVycxoqCgdWZWN0b3IzEgkKAVgYASABKAISCQoBWRgCIAEoAhIJCgFa",
            "GAMgASgCGjgKClF1YXRlcm5pb24SCQoBWBgBIAEoAhIJCgFZGAIgASgCEgkK",
            "AVoYAyABKAISCQoBVxgEIAEoAhopCgZFdWxlcnMSCQoBWBgBIAEoAhIJCgFZ",
            "GAIgASgCEgkKAVoYAyABKAIiNgoOR2FtZU9iamVjdExpc3QSJAoHb2JqZWN0",
            "cxgBIAMoCzITLkhhcHRpT1MuR2FtZU9iamVjdCJYChVHYW1lT2JqZWN0Qmxp",
            "bXBTdGF0dXMSFAoMZ2FtZU9iamVjdElkGAEgASgJEikKC2JsaW1wU3RhdHVz",
            "GAIgASgLMhQuSGFwdGlPUy5CbGltcFN0YXR1czK9AQoQQmxpbXBDb250cm9s",
            "bGluZxIxCglHZXRCbGltcHMSDi5IYXB0aU9TLkVtcHR5GhIuSGFwdGlPUy5C",
            "bGltcExpc3QiABJACgxHZXRCbGltcEluZm8SGC5IYXB0aU9TLkJsaW1wSWRl",
            "bnRpZmllchoULkhhcHRpT1MuQmxpbXBTdGF0dXMiABI0CglNb3ZlQmxpbXAS",
            "FS5IYXB0aU9TLkJsaW1wQ29udHJvbBoOLkhhcHRpT1MuRW1wdHkiADJ6Cg5C",
            "bGltcEJyb2FkY2FzdBIyCgpTZW5kQmxpbXBzEhIuSGFwdGlPUy5CbGltcExp",
            "c3QaDi5IYXB0aU9TLkVtcHR5IgASNAoKU2VuZFN0YXR1cxIULkhhcHRpT1Mu",
            "QmxpbXBTdGF0dXMaDi5IYXB0aU9TLkVtcHR5IgAy8QEKDFZpcnR1YWxXb3Js",
            "ZBI3CgpHZXRPYmplY3RzEg4uSGFwdGlPUy5FbXB0eRoXLkhhcHRpT1MuR2Ft",
            "ZU9iamVjdExpc3QiABJDCg9TZW5kQmxpbXBTdGF0dXMSHi5IYXB0aU9TLkdh",
            "bWVPYmplY3RCbGltcFN0YXR1cxoOLkhhcHRpT1MuRW1wdHkiABIyCglPblRh",
            "a2VPZmYSEy5IYXB0aU9TLkdhbWVPYmplY3QaDi5IYXB0aU9TLkVtcHR5IgAS",
            "LwoGT25MYW5kEhMuSGFwdGlPUy5HYW1lT2JqZWN0Gg4uSGFwdGlPUy5FbXB0",
            "eSIAMmoKCVJlYWxXb3JsZBIuCgVTdGFydBITLkhhcHRpT1MuR2FtZU9iamVj",
            "dBoOLkhhcHRpT1MuRW1wdHkiABItCgRTdG9wEhMuSGFwdGlPUy5HYW1lT2Jq",
            "ZWN0Gg4uSGFwdGlPUy5FbXB0eSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.Empty), global::HaptiOS.Empty.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.DroneIds), global::HaptiOS.DroneIds.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.ConnectResult), global::HaptiOS.ConnectResult.Parser, new[]{ "Connected" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.Timeout), global::HaptiOS.Timeout.Parser, new[]{ "Seconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.ConnectParams), global::HaptiOS.ConnectParams.Parser, new[]{ "DroneId", "NumTries", "MaxTilt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.DisconnectParams), global::HaptiOS.DisconnectParams.Parser, new[]{ "DroneId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.TakeOffParams), global::HaptiOS.TakeOffParams.Parser, new[]{ "DroneId", "Timeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.LandParams), global::HaptiOS.LandParams.Parser, new[]{ "DroneId", "Timeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.DroneControl), global::HaptiOS.DroneControl.Parser, new[]{ "DroneId", "Roll", "Pitch", "Yaw", "VerticalMovement" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.BlimpIdentifier), global::HaptiOS.BlimpIdentifier.Parser, new[]{ "Number", "IpAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.BlimpControl), global::HaptiOS.BlimpControl.Parser, new[]{ "Identifier", "Throttle", "Steering", "Height", "Mode" }, null, new[]{ typeof(global::HaptiOS.BlimpControl.Types.Mode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.BlimpStatus), global::HaptiOS.BlimpStatus.Parser, new[]{ "Identifier", "Battery", "YawAngle", "TargetYawAngle", "LaserHeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.BlimpList), global::HaptiOS.BlimpList.Parser, new[]{ "Blimps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.GameObject), global::HaptiOS.GameObject.Parser, new[]{ "Id", "Position", "Rotation", "Eulers" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.GameObject.Types.Vector3), global::HaptiOS.GameObject.Types.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.GameObject.Types.Quaternion), global::HaptiOS.GameObject.Types.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.GameObject.Types.Eulers), global::HaptiOS.GameObject.Types.Eulers.Parser, new[]{ "X", "Y", "Z" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.GameObjectList), global::HaptiOS.GameObjectList.Parser, new[]{ "Objects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HaptiOS.GameObjectBlimpStatus), global::HaptiOS.GameObjectBlimpStatus.Parser, new[]{ "GameObjectId", "BlimpStatus" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///* COMMON Objects *
  /// </summary>
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* DRONES/QUADROCOPTERS *
  /// </summary>
  public sealed partial class DroneIds : pb::IMessage<DroneIds> {
    private static readonly pb::MessageParser<DroneIds> _parser = new pb::MessageParser<DroneIds>(() => new DroneIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DroneIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DroneIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DroneIds(DroneIds other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DroneIds Clone() {
      return new DroneIds(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_values_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> values_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DroneIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DroneIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DroneIds other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectResult : pb::IMessage<ConnectResult> {
    private static readonly pb::MessageParser<ConnectResult> _parser = new pb::MessageParser<ConnectResult>(() => new ConnectResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResult(ConnectResult other) : this() {
      connected_ = other.connected_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResult Clone() {
      return new ConnectResult(this);
    }

    /// <summary>Field number for the "connected" field.</summary>
    public const int ConnectedFieldNumber = 1;
    private bool connected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Connected {
      get { return connected_; }
      set {
        connected_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Connected != other.Connected) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Connected != false) hash ^= Connected.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Connected != false) {
        output.WriteRawTag(8);
        output.WriteBool(Connected);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Connected != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectResult other) {
      if (other == null) {
        return;
      }
      if (other.Connected != false) {
        Connected = other.Connected;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Connected = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Timeout : pb::IMessage<Timeout> {
    private static readonly pb::MessageParser<Timeout> _parser = new pb::MessageParser<Timeout>(() => new Timeout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timeout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timeout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timeout(Timeout other) : this() {
      seconds_ = other.seconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timeout Clone() {
      return new Timeout(this);
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 1;
    private int seconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timeout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timeout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seconds != other.Seconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seconds != 0) hash ^= Seconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timeout other) {
      if (other == null) {
        return;
      }
      if (other.Seconds != 0) {
        Seconds = other.Seconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectParams : pb::IMessage<ConnectParams> {
    private static readonly pb::MessageParser<ConnectParams> _parser = new pb::MessageParser<ConnectParams>(() => new ConnectParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectParams(ConnectParams other) : this() {
      droneId_ = other.droneId_;
      numTries_ = other.numTries_;
      maxTilt_ = other.maxTilt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectParams Clone() {
      return new ConnectParams(this);
    }

    /// <summary>Field number for the "droneId" field.</summary>
    public const int DroneIdFieldNumber = 1;
    private int droneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DroneId {
      get { return droneId_; }
      set {
        droneId_ = value;
      }
    }

    /// <summary>Field number for the "numTries" field.</summary>
    public const int NumTriesFieldNumber = 2;
    private int numTries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumTries {
      get { return numTries_; }
      set {
        numTries_ = value;
      }
    }

    /// <summary>Field number for the "maxTilt" field.</summary>
    public const int MaxTiltFieldNumber = 3;
    private int maxTilt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxTilt {
      get { return maxTilt_; }
      set {
        maxTilt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DroneId != other.DroneId) return false;
      if (NumTries != other.NumTries) return false;
      if (MaxTilt != other.MaxTilt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DroneId != 0) hash ^= DroneId.GetHashCode();
      if (NumTries != 0) hash ^= NumTries.GetHashCode();
      if (MaxTilt != 0) hash ^= MaxTilt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DroneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DroneId);
      }
      if (NumTries != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumTries);
      }
      if (MaxTilt != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxTilt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DroneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DroneId);
      }
      if (NumTries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTries);
      }
      if (MaxTilt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTilt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectParams other) {
      if (other == null) {
        return;
      }
      if (other.DroneId != 0) {
        DroneId = other.DroneId;
      }
      if (other.NumTries != 0) {
        NumTries = other.NumTries;
      }
      if (other.MaxTilt != 0) {
        MaxTilt = other.MaxTilt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DroneId = input.ReadInt32();
            break;
          }
          case 16: {
            NumTries = input.ReadInt32();
            break;
          }
          case 24: {
            MaxTilt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisconnectParams : pb::IMessage<DisconnectParams> {
    private static readonly pb::MessageParser<DisconnectParams> _parser = new pb::MessageParser<DisconnectParams>(() => new DisconnectParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectParams(DisconnectParams other) : this() {
      droneId_ = other.droneId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectParams Clone() {
      return new DisconnectParams(this);
    }

    /// <summary>Field number for the "droneId" field.</summary>
    public const int DroneIdFieldNumber = 1;
    private int droneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DroneId {
      get { return droneId_; }
      set {
        droneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DroneId != other.DroneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DroneId != 0) hash ^= DroneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DroneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DroneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DroneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DroneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectParams other) {
      if (other == null) {
        return;
      }
      if (other.DroneId != 0) {
        DroneId = other.DroneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DroneId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TakeOffParams : pb::IMessage<TakeOffParams> {
    private static readonly pb::MessageParser<TakeOffParams> _parser = new pb::MessageParser<TakeOffParams>(() => new TakeOffParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeOffParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOffParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOffParams(TakeOffParams other) : this() {
      droneId_ = other.droneId_;
      timeout_ = other.timeout_ != null ? other.timeout_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOffParams Clone() {
      return new TakeOffParams(this);
    }

    /// <summary>Field number for the "droneId" field.</summary>
    public const int DroneIdFieldNumber = 1;
    private int droneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DroneId {
      get { return droneId_; }
      set {
        droneId_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 2;
    private global::HaptiOS.Timeout timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaptiOS.Timeout Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeOffParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeOffParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DroneId != other.DroneId) return false;
      if (!object.Equals(Timeout, other.Timeout)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DroneId != 0) hash ^= DroneId.GetHashCode();
      if (timeout_ != null) hash ^= Timeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DroneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DroneId);
      }
      if (timeout_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DroneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DroneId);
      }
      if (timeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeOffParams other) {
      if (other == null) {
        return;
      }
      if (other.DroneId != 0) {
        DroneId = other.DroneId;
      }
      if (other.timeout_ != null) {
        if (timeout_ == null) {
          timeout_ = new global::HaptiOS.Timeout();
        }
        Timeout.MergeFrom(other.Timeout);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DroneId = input.ReadInt32();
            break;
          }
          case 18: {
            if (timeout_ == null) {
              timeout_ = new global::HaptiOS.Timeout();
            }
            input.ReadMessage(timeout_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LandParams : pb::IMessage<LandParams> {
    private static readonly pb::MessageParser<LandParams> _parser = new pb::MessageParser<LandParams>(() => new LandParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LandParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandParams(LandParams other) : this() {
      droneId_ = other.droneId_;
      timeout_ = other.timeout_ != null ? other.timeout_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandParams Clone() {
      return new LandParams(this);
    }

    /// <summary>Field number for the "droneId" field.</summary>
    public const int DroneIdFieldNumber = 1;
    private int droneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DroneId {
      get { return droneId_; }
      set {
        droneId_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 2;
    private global::HaptiOS.Timeout timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaptiOS.Timeout Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LandParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LandParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DroneId != other.DroneId) return false;
      if (!object.Equals(Timeout, other.Timeout)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DroneId != 0) hash ^= DroneId.GetHashCode();
      if (timeout_ != null) hash ^= Timeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DroneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DroneId);
      }
      if (timeout_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DroneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DroneId);
      }
      if (timeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LandParams other) {
      if (other == null) {
        return;
      }
      if (other.DroneId != 0) {
        DroneId = other.DroneId;
      }
      if (other.timeout_ != null) {
        if (timeout_ == null) {
          timeout_ = new global::HaptiOS.Timeout();
        }
        Timeout.MergeFrom(other.Timeout);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DroneId = input.ReadInt32();
            break;
          }
          case 18: {
            if (timeout_ == null) {
              timeout_ = new global::HaptiOS.Timeout();
            }
            input.ReadMessage(timeout_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DroneControl : pb::IMessage<DroneControl> {
    private static readonly pb::MessageParser<DroneControl> _parser = new pb::MessageParser<DroneControl>(() => new DroneControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DroneControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DroneControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DroneControl(DroneControl other) : this() {
      droneId_ = other.droneId_;
      roll_ = other.roll_;
      pitch_ = other.pitch_;
      yaw_ = other.yaw_;
      verticalMovement_ = other.verticalMovement_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DroneControl Clone() {
      return new DroneControl(this);
    }

    /// <summary>Field number for the "droneId" field.</summary>
    public const int DroneIdFieldNumber = 1;
    private int droneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DroneId {
      get { return droneId_; }
      set {
        droneId_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 2;
    private int roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 3;
    private int pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 4;
    private int yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "verticalMovement" field.</summary>
    public const int VerticalMovementFieldNumber = 5;
    private int verticalMovement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VerticalMovement {
      get { return verticalMovement_; }
      set {
        verticalMovement_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DroneControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DroneControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DroneId != other.DroneId) return false;
      if (Roll != other.Roll) return false;
      if (Pitch != other.Pitch) return false;
      if (Yaw != other.Yaw) return false;
      if (VerticalMovement != other.VerticalMovement) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DroneId != 0) hash ^= DroneId.GetHashCode();
      if (Roll != 0) hash ^= Roll.GetHashCode();
      if (Pitch != 0) hash ^= Pitch.GetHashCode();
      if (Yaw != 0) hash ^= Yaw.GetHashCode();
      if (VerticalMovement != 0) hash ^= VerticalMovement.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DroneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DroneId);
      }
      if (Roll != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Roll);
      }
      if (Pitch != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pitch);
      }
      if (Yaw != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Yaw);
      }
      if (VerticalMovement != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(VerticalMovement);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DroneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DroneId);
      }
      if (Roll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roll);
      }
      if (Pitch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pitch);
      }
      if (Yaw != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Yaw);
      }
      if (VerticalMovement != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VerticalMovement);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DroneControl other) {
      if (other == null) {
        return;
      }
      if (other.DroneId != 0) {
        DroneId = other.DroneId;
      }
      if (other.Roll != 0) {
        Roll = other.Roll;
      }
      if (other.Pitch != 0) {
        Pitch = other.Pitch;
      }
      if (other.Yaw != 0) {
        Yaw = other.Yaw;
      }
      if (other.VerticalMovement != 0) {
        VerticalMovement = other.VerticalMovement;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DroneId = input.ReadInt32();
            break;
          }
          case 16: {
            Roll = input.ReadInt32();
            break;
          }
          case 24: {
            Pitch = input.ReadInt32();
            break;
          }
          case 32: {
            Yaw = input.ReadInt32();
            break;
          }
          case 40: {
            VerticalMovement = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlimpIdentifier : pb::IMessage<BlimpIdentifier> {
    private static readonly pb::MessageParser<BlimpIdentifier> _parser = new pb::MessageParser<BlimpIdentifier>(() => new BlimpIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlimpIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlimpIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlimpIdentifier(BlimpIdentifier other) : this() {
      number_ = other.number_;
      ipAddress_ = other.ipAddress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlimpIdentifier Clone() {
      return new BlimpIdentifier(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 2;
    private string ipAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlimpIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlimpIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (IpAddress != other.IpAddress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0) hash ^= Number.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Number);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IpAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlimpIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Number = input.ReadInt32();
            break;
          }
          case 18: {
            IpAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlimpControl : pb::IMessage<BlimpControl> {
    private static readonly pb::MessageParser<BlimpControl> _parser = new pb::MessageParser<BlimpControl>(() => new BlimpControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlimpControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlimpControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlimpControl(BlimpControl other) : this() {
      identifier_ = other.identifier_ != null ? other.identifier_.Clone() : null;
      throttle_ = other.throttle_;
      steering_ = other.steering_;
      height_ = other.height_;
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlimpControl Clone() {
      return new BlimpControl(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private global::HaptiOS.BlimpIdentifier identifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaptiOS.BlimpIdentifier Identifier {
      get { return identifier_; }
      set {
        identifier_ = value;
      }
    }

    /// <summary>Field number for the "throttle" field.</summary>
    public const int ThrottleFieldNumber = 2;
    private int throttle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Throttle {
      get { return throttle_; }
      set {
        throttle_ = value;
      }
    }

    /// <summary>Field number for the "steering" field.</summary>
    public const int SteeringFieldNumber = 3;
    private int steering_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Steering {
      get { return steering_; }
      set {
        steering_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 5;
    private global::HaptiOS.BlimpControl.Types.Mode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaptiOS.BlimpControl.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlimpControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlimpControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identifier, other.Identifier)) return false;
      if (Throttle != other.Throttle) return false;
      if (Steering != other.Steering) return false;
      if (Height != other.Height) return false;
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identifier_ != null) hash ^= Identifier.GetHashCode();
      if (Throttle != 0) hash ^= Throttle.GetHashCode();
      if (Steering != 0) hash ^= Steering.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identifier);
      }
      if (Throttle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Throttle);
      }
      if (Steering != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Steering);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
      if (Mode != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identifier);
      }
      if (Throttle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Throttle);
      }
      if (Steering != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Steering);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlimpControl other) {
      if (other == null) {
        return;
      }
      if (other.identifier_ != null) {
        if (identifier_ == null) {
          identifier_ = new global::HaptiOS.BlimpIdentifier();
        }
        Identifier.MergeFrom(other.Identifier);
      }
      if (other.Throttle != 0) {
        Throttle = other.Throttle;
      }
      if (other.Steering != 0) {
        Steering = other.Steering;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identifier_ == null) {
              identifier_ = new global::HaptiOS.BlimpIdentifier();
            }
            input.ReadMessage(identifier_);
            break;
          }
          case 16: {
            Throttle = input.ReadInt32();
            break;
          }
          case 24: {
            Steering = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
          case 40: {
            mode_ = (global::HaptiOS.BlimpControl.Types.Mode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlimpControl message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Mode {
        [pbr::OriginalName("MANUAL")] Manual = 0,
        [pbr::OriginalName("MANUAL_ALT")] ManualAlt = 1,
        [pbr::OriginalName("YAW_STABILIZATION")] YawStabilization = 2,
        [pbr::OriginalName("YAW_STABILIZATION_ALT")] YawStabilizationAlt = 3,
        [pbr::OriginalName("MOTORS_OFF")] MotorsOff = 100,
      }

    }
    #endregion

  }

  public sealed partial class BlimpStatus : pb::IMessage<BlimpStatus> {
    private static readonly pb::MessageParser<BlimpStatus> _parser = new pb::MessageParser<BlimpStatus>(() => new BlimpStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlimpStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlimpStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlimpStatus(BlimpStatus other) : this() {
      identifier_ = other.identifier_ != null ? other.identifier_.Clone() : null;
      battery_ = other.battery_;
      yawAngle_ = other.yawAngle_;
      targetYawAngle_ = other.targetYawAngle_;
      laserHeight_ = other.laserHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlimpStatus Clone() {
      return new BlimpStatus(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private global::HaptiOS.BlimpIdentifier identifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaptiOS.BlimpIdentifier Identifier {
      get { return identifier_; }
      set {
        identifier_ = value;
      }
    }

    /// <summary>Field number for the "battery" field.</summary>
    public const int BatteryFieldNumber = 2;
    private float battery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Battery {
      get { return battery_; }
      set {
        battery_ = value;
      }
    }

    /// <summary>Field number for the "yaw_angle" field.</summary>
    public const int YawAngleFieldNumber = 3;
    private float yawAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YawAngle {
      get { return yawAngle_; }
      set {
        yawAngle_ = value;
      }
    }

    /// <summary>Field number for the "target_yaw_angle" field.</summary>
    public const int TargetYawAngleFieldNumber = 4;
    private float targetYawAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetYawAngle {
      get { return targetYawAngle_; }
      set {
        targetYawAngle_ = value;
      }
    }

    /// <summary>Field number for the "laser_height" field.</summary>
    public const int LaserHeightFieldNumber = 5;
    private float laserHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LaserHeight {
      get { return laserHeight_; }
      set {
        laserHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlimpStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlimpStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identifier, other.Identifier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Battery, other.Battery)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YawAngle, other.YawAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetYawAngle, other.TargetYawAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LaserHeight, other.LaserHeight)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identifier_ != null) hash ^= Identifier.GetHashCode();
      if (Battery != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Battery);
      if (YawAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YawAngle);
      if (TargetYawAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetYawAngle);
      if (LaserHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LaserHeight);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identifier);
      }
      if (Battery != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Battery);
      }
      if (YawAngle != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(YawAngle);
      }
      if (TargetYawAngle != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TargetYawAngle);
      }
      if (LaserHeight != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(LaserHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identifier);
      }
      if (Battery != 0F) {
        size += 1 + 4;
      }
      if (YawAngle != 0F) {
        size += 1 + 4;
      }
      if (TargetYawAngle != 0F) {
        size += 1 + 4;
      }
      if (LaserHeight != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlimpStatus other) {
      if (other == null) {
        return;
      }
      if (other.identifier_ != null) {
        if (identifier_ == null) {
          identifier_ = new global::HaptiOS.BlimpIdentifier();
        }
        Identifier.MergeFrom(other.Identifier);
      }
      if (other.Battery != 0F) {
        Battery = other.Battery;
      }
      if (other.YawAngle != 0F) {
        YawAngle = other.YawAngle;
      }
      if (other.TargetYawAngle != 0F) {
        TargetYawAngle = other.TargetYawAngle;
      }
      if (other.LaserHeight != 0F) {
        LaserHeight = other.LaserHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identifier_ == null) {
              identifier_ = new global::HaptiOS.BlimpIdentifier();
            }
            input.ReadMessage(identifier_);
            break;
          }
          case 21: {
            Battery = input.ReadFloat();
            break;
          }
          case 29: {
            YawAngle = input.ReadFloat();
            break;
          }
          case 37: {
            TargetYawAngle = input.ReadFloat();
            break;
          }
          case 45: {
            LaserHeight = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlimpList : pb::IMessage<BlimpList> {
    private static readonly pb::MessageParser<BlimpList> _parser = new pb::MessageParser<BlimpList>(() => new BlimpList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlimpList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlimpList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlimpList(BlimpList other) : this() {
      blimps_ = other.blimps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlimpList Clone() {
      return new BlimpList(this);
    }

    /// <summary>Field number for the "blimps" field.</summary>
    public const int BlimpsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HaptiOS.BlimpStatus> _repeated_blimps_codec
        = pb::FieldCodec.ForMessage(10, global::HaptiOS.BlimpStatus.Parser);
    private readonly pbc::RepeatedField<global::HaptiOS.BlimpStatus> blimps_ = new pbc::RepeatedField<global::HaptiOS.BlimpStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HaptiOS.BlimpStatus> Blimps {
      get { return blimps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlimpList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlimpList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blimps_.Equals(other.blimps_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blimps_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blimps_.WriteTo(output, _repeated_blimps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blimps_.CalculateSize(_repeated_blimps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlimpList other) {
      if (other == null) {
        return;
      }
      blimps_.Add(other.blimps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            blimps_.AddEntriesFrom(input, _repeated_blimps_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameObject : pb::IMessage<GameObject> {
    private static readonly pb::MessageParser<GameObject> _parser = new pb::MessageParser<GameObject>(() => new GameObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObject(GameObject other) : this() {
      id_ = other.id_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      eulers_ = other.eulers_ != null ? other.eulers_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObject Clone() {
      return new GameObject(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::HaptiOS.GameObject.Types.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaptiOS.GameObject.Types.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::HaptiOS.GameObject.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaptiOS.GameObject.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "eulers" field.</summary>
    public const int EulersFieldNumber = 4;
    private global::HaptiOS.GameObject.Types.Eulers eulers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaptiOS.GameObject.Types.Eulers Eulers {
      get { return eulers_; }
      set {
        eulers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Eulers, other.Eulers)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (eulers_ != null) hash ^= Eulers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (eulers_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Eulers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (eulers_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Eulers);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameObject other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::HaptiOS.GameObject.Types.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::HaptiOS.GameObject.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.eulers_ != null) {
        if (eulers_ == null) {
          eulers_ = new global::HaptiOS.GameObject.Types.Eulers();
        }
        Eulers.MergeFrom(other.Eulers);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::HaptiOS.GameObject.Types.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              rotation_ = new global::HaptiOS.GameObject.Types.Quaternion();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 34: {
            if (eulers_ == null) {
              eulers_ = new global::HaptiOS.GameObject.Types.Eulers();
            }
            input.ReadMessage(eulers_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameObject message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Vector3 : pb::IMessage<Vector3> {
        private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::HaptiOS.GameObject.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Vector3() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Vector3(Vector3 other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Vector3 Clone() {
          return new Vector3(this);
        }

        /// <summary>Field number for the "X" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "Y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "Z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Vector3);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Vector3 other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Vector3 other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Quaternion : pb::IMessage<Quaternion> {
        private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::HaptiOS.GameObject.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quaternion() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quaternion(Quaternion other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          w_ = other.w_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quaternion Clone() {
          return new Quaternion(this);
        }

        /// <summary>Field number for the "X" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "Y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "Z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        /// <summary>Field number for the "W" field.</summary>
        public const int WFieldNumber = 4;
        private float w_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float W {
          get { return w_; }
          set {
            w_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Quaternion);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Quaternion other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
          if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
          if (W != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(W);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          if (W != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Quaternion other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
          if (other.W != 0F) {
            W = other.W;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
              case 37: {
                W = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Eulers : pb::IMessage<Eulers> {
        private static readonly pb::MessageParser<Eulers> _parser = new pb::MessageParser<Eulers>(() => new Eulers());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Eulers> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::HaptiOS.GameObject.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Eulers() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Eulers(Eulers other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          z_ = other.z_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Eulers Clone() {
          return new Eulers(this);
        }

        /// <summary>Field number for the "X" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "Y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "Z" field.</summary>
        public const int ZFieldNumber = 3;
        private float z_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Eulers);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Eulers other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (Z != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Z);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (Z != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Eulers other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          if (other.Z != 0F) {
            Z = other.Z;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
              case 29: {
                Z = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GameObjectList : pb::IMessage<GameObjectList> {
    private static readonly pb::MessageParser<GameObjectList> _parser = new pb::MessageParser<GameObjectList>(() => new GameObjectList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameObjectList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObjectList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObjectList(GameObjectList other) : this() {
      objects_ = other.objects_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObjectList Clone() {
      return new GameObjectList(this);
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HaptiOS.GameObject> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(10, global::HaptiOS.GameObject.Parser);
    private readonly pbc::RepeatedField<global::HaptiOS.GameObject> objects_ = new pbc::RepeatedField<global::HaptiOS.GameObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HaptiOS.GameObject> Objects {
      get { return objects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameObjectList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameObjectList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objects_.Equals(other.objects_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objects_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objects_.WriteTo(output, _repeated_objects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objects_.CalculateSize(_repeated_objects_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameObjectList other) {
      if (other == null) {
        return;
      }
      objects_.Add(other.objects_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameObjectBlimpStatus : pb::IMessage<GameObjectBlimpStatus> {
    private static readonly pb::MessageParser<GameObjectBlimpStatus> _parser = new pb::MessageParser<GameObjectBlimpStatus>(() => new GameObjectBlimpStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameObjectBlimpStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HaptiOS.HaptiosReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObjectBlimpStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObjectBlimpStatus(GameObjectBlimpStatus other) : this() {
      gameObjectId_ = other.gameObjectId_;
      blimpStatus_ = other.blimpStatus_ != null ? other.blimpStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObjectBlimpStatus Clone() {
      return new GameObjectBlimpStatus(this);
    }

    /// <summary>Field number for the "gameObjectId" field.</summary>
    public const int GameObjectIdFieldNumber = 1;
    private string gameObjectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameObjectId {
      get { return gameObjectId_; }
      set {
        gameObjectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blimpStatus" field.</summary>
    public const int BlimpStatusFieldNumber = 2;
    private global::HaptiOS.BlimpStatus blimpStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HaptiOS.BlimpStatus BlimpStatus {
      get { return blimpStatus_; }
      set {
        blimpStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameObjectBlimpStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameObjectBlimpStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameObjectId != other.GameObjectId) return false;
      if (!object.Equals(BlimpStatus, other.BlimpStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameObjectId.Length != 0) hash ^= GameObjectId.GetHashCode();
      if (blimpStatus_ != null) hash ^= BlimpStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameObjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameObjectId);
      }
      if (blimpStatus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlimpStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameObjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameObjectId);
      }
      if (blimpStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlimpStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameObjectBlimpStatus other) {
      if (other == null) {
        return;
      }
      if (other.GameObjectId.Length != 0) {
        GameObjectId = other.GameObjectId;
      }
      if (other.blimpStatus_ != null) {
        if (blimpStatus_ == null) {
          blimpStatus_ = new global::HaptiOS.BlimpStatus();
        }
        BlimpStatus.MergeFrom(other.BlimpStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameObjectId = input.ReadString();
            break;
          }
          case 18: {
            if (blimpStatus_ == null) {
              blimpStatus_ = new global::HaptiOS.BlimpStatus();
            }
            input.ReadMessage(blimpStatus_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
